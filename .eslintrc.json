// JS代码规范
{
    // 代码运行环境
    "env": {
        // browser 全局变量
        "browser": true
        // Node.js 全局变量和 Node.js 作用域
        ,"node": true
        // 支持除了modules所有 ECMAScript 6 特性
        ,"es6": true
    }
    // 自定义规则
    ,"rules": {

        /* -----------------------开发阶段----------------------- */

        // 禁止使用拖尾逗号
        "comma-dangle":[
            "error"
            ,"never"
        ]
        // 禁止调用console方法 allow 允许的console方法 {"allow": ["warn", "error"]}
        ,"no-console":[
            "error",
            {
                "allow": ["log", "warn", "error"]
            }
        ]
        // except-parens 禁止在分支、循环语句包含赋值，除了用()包起来
        // always        禁止在分支、循环语句包含赋值
        ,"no-cond-assign": [
            "error",
            "except-parens"
        ]
        // 不允许条件中使用常量 checkLoops 允许循环出现常量 {"checkLoops": false}
        ,"no-constant-condition": [
            "error",
            {
                // 开发周期mock数据 可能用到常量
                "checkLoops": false
            }
        ]
        // 禁止重复定义的参数
        ,"no-dupe-args": [
            "error"
        ]
        // 禁止重复的键值
        ,"no-dupe-keys": [
            "error"
        ]
        // 禁止重复 case 值
        ,"no-duplicate-case": [
            "error"
        ]
        // 禁止空块语句，但忽略带注释的语句块 允许的catch为空 {"allowEmptyCatch": true}
        ,"no-empty": [
            "error",
            { 
                "allowEmptyCatch": true
            }
        ]
        // 禁止在正则表达式中出现空字符集
        // 已知漏报情况 var abcNeverMatches = new RegExp("^abc[]");
        ,"no-empty-character-class": [
            "error"
        ]
        // 禁止对 catch 子句中的参数做赋值
        ,"no-ex-assign": [
            "error"
        ]
        // 禁止不必要的布尔值转换
        ,"no-extra-boolean-cast": [
            "error"
        ]
        // 禁止多余括号 returnAssign 允许返回语句包含多余括号 conditionalAssign 允许条件语句包含多余括号
        // nestedBinaryExpressions 允许表达式包含多余括号 eg: a || (b && c);
        ,"no-extra-parens": [
            "error",
            "all",
            { 
                "nestedBinaryExpressions": false
                ,"returnAssign": false
            }
        ]
        // 禁止不必要的分号
        ,"no-extra-semi": [
            "error"
        ]
        // 禁止对 function 声明重新赋值
        ,"no-func-assign": [
            "error"
        ]
        // 禁止在嵌套的语句块中出现 function 或 var 声明, 默认 function, function,var都限制 both 
        ,"no-inner-declarations": [
            "error"
        ]
        // 禁止在RegExp构造函数中出现无效的正则表达式 allowConstructorFlags 允许使用额外的flag 
        // 在没有配置 "parserOptions": { "ecmaVersion": 6 } 情况下，允许使用u,y Flag
        ,"no-invalid-regexp": [
            "error",
            { 
                "allowConstructorFlags": ["u", "y"] 
            }
        ]
        // 禁止在 in 表达式中出现否定的左操作数
        ,"no-negated-in-lhs": [
            "error"
        ]
        // 禁止将全局对象当作函数进行调用 eg: Math(),JSON() 
        ,"no-obj-calls": [
            "error"
        ]
        // 禁止直接使用 Object.prototypes 的内置属性 杜绝出错风险
        // eg: var b = Object.create(null); b.hasOwnProperty === undefined
        // 改成 {}.hasOwnProperty.call(b, 'propertyName');
        ,"no-prototype-builtins": [
            "error"
        ]
        // 禁止正则表达式字面量中出现多个空格 提高正则表达式的可读性
        ,"no-regex-spaces": [
            "error"
        ]
        // 禁止使用稀疏数组 eg: var colors = [ "red", ,"blue"];
        ,"no-sparse-arrays": [
            "error"
        ]
        // 禁止使用令人困惑的多行表达式 避免漏加分号导致运行期异常
        // eg：var hello = 'world'
        //    [1, 2, 3].forEach(addNumber); // 'world'[1, 2, 3].forEach(addNumber); 没触发ASI，导致异常
        /**
         * 自动加分号
         * -- 或 ++ 开头                         上一行末尾 
         * for()、while()、do、if() 或 else 没有{ 该行末尾
         * 不自动加分号
         * [、(、+、*、/、-、,、.开头              上一行末尾
         * .、,结尾                              该行末尾 
         */   
        ,"no-unexpected-multiline": [
            "error"
        ]
        // 禁止在 return、throw、continue 和 break 语句后出现不可达代码 (no-unreachable)
        ,"no-unreachable": [
            "error"
        ]
        // 禁止在 finally 语句块中出现控制流语句 (no-unsafe-finally)
        ,"no-unsafe-finally": [
            "error"
        ]
        // 要求调用 isNaN()检查 因为 NaN !== NaN 为 true，所以要使用isNaN()来判断
        ,"use-isnan": [
            "error"
        ]
        // 强制 typeof 表达式与有效的字符串进行比较 (valid-typeof)
        ,"valid-typeof": [
            "error"
        ]
        /* -----------------------生产阶段-----------------------

        // 禁止使用拖尾逗号
        ,"comma-dangle":[
            "error"
            ,"never"
        ]
        // except-parens 禁止在分支、循环语句包含赋值，除了用()包起来
        // always        禁止在分支、循环语句包含赋值
        ,"no-cond-assign": [
            "error",
            "except-parens"
        ]
        // 禁止调用console方法 allow 允许的console方法 {"allow": ["warn", "error"]}
        ,"no-console":[
            "error"
        ]
        // 不允许条件中使用常量 checkLoops 允许循环出现常量 {"checkLoops": false}
        ,"no-constant-condition": [
            "error"
        ]
        // 禁止出现debugger
        ,"no-debugger": [
            "error"
        ]
        // 禁止重复定义的参数
        ,"no-dupe-args": [
            "error"
        ]
        // 禁止重复的键值
        ,"no-dupe-keys": [
            "error"
        ]
        // 禁止重复 case 值
        ,"no-duplicate-case": [
            "error"
        ]
        // 禁止空块语句，但忽略带注释的语句块 允许的catch为空 {"allowEmptyCatch": true}
        ,"no-empty": [
            "error",
            { 
                "allowEmptyCatch": true
            }
        ]
        // 禁止在正则表达式中出现空字符集
        // 已知漏报情况 var abcNeverMatches = new RegExp("^abc[]");
        ,"no-empty-character-class": [
            "error"
        ]
        // 禁止对 catch 子句中的参数做赋值
        ,"no-ex-assign": [
            "error"
        ]
        // 禁止不必要的布尔值转换
        ,"no-extra-boolean-cast": [
            "error"
        ]
        // 禁止多余括号 returnAssign 允许返回语句包含多余括号 conditionalAssign 允许条件语句包含多余括号
        // nestedBinaryExpressions 允许表达式包含多余括号 eg: a || (b && c);
        ,"no-extra-parens": [
            "error",
            "all",
            { 
                "nestedBinaryExpressions": false
                ,"returnAssign": false
            }
        ]
        // 禁止不必要的分号
        ,"no-extra-semi": [
            "error"
        ]
        // 禁止对 function 声明重新赋值
        ,"no-func-assign": [
            "error"
        ]
        // 禁止在嵌套的语句块中出现 function 或 var 声明, 默认 function, function,var都限制 both 
        ,"no-inner-declarations": [
            "error"
        ]
        // 禁止在RegExp构造函数中出现无效的正则表达式 allowConstructorFlags 允许使用额外的flag 
        // 在没有配置 "parserOptions": { "ecmaVersion": 6 } 情况下，允许使用u,y Flag
        ,"no-invalid-regexp": [
            "error",
            { 
                "allowConstructorFlags": ["u", "y"] 
            }
        ]
        // 禁止在 in 表达式中出现否定的左操作数
        ,"no-negated-in-lhs": [
            "error"
        ]
        // 禁止将全局对象当作函数进行调用 eg: Math(),JSON() 
        ,"no-obj-calls": [
            "error"
        ]
        // 禁止直接使用 Object.prototypes 的内置属性 杜绝出错风险
        // eg: var b = Object.create(null); b.hasOwnProperty === undefined
        // 改成 {}.hasOwnProperty.call(b, 'propertyName');
        ,"no-prototype-builtins": [
            "error"
        ]
        // 禁止正则表达式字面量中出现多个空格 提高正则表达式的可读性
        ,"no-regex-spaces": [
            "error"
        ]
        // 禁止使用稀疏数组 eg: var colors = [ "red", ,"blue"];
        ,"no-sparse-arrays": [
            "error"
        ]
        // 禁止使用令人困惑的多行表达式 避免漏加分号导致运行期异常
        // eg：var hello = 'world'
        //    [1, 2, 3].forEach(addNumber); // 'world'[1, 2, 3].forEach(addNumber); 没触发ASI，导致异常
        ,"no-unexpected-multiline": [
            "error"
        ]
        // 禁止在 return、throw、continue 和 break 语句后出现不可达代码 (no-unreachable)
        ,"no-unreachable": [
            "error"
        ]
        // 禁止在 finally 语句块中出现控制流语句 (no-unsafe-finally)
        ,"no-unsafe-finally": [
            "error"
        ]
        // 要求调用 isNaN()检查 因为 NaN !== NaN 为 true，所以要使用isNaN()来判断
        ,"use-isnan": [
            "error"
        ]
        // 强制 typeof 表达式与有效的字符串进行比较 (valid-typeof)
        ,"valid-typeof": [
            "error"
        ]

        */

        /* -----------------------初始化设置-----------------------

        // 缩进使用tab
        ,"indent": [
            // 错误级别 可选值 warn error 
            "error",
            "tab"
        ]
        // 换行符风格 windows "\r\n" 回车+换行分割符 mac、unix "\n" 换行分隔符
        ,"linebreak-style": [
            "error",
            "unix"
        ]
        // 引号用双引号
        ,"quotes": [
            "error",
            "double"
        ],
        // 分号是否必须有
        ,"semi": [
            "error",
            "always"
        ]

        */
    }
    // 使用eslint推荐的规则，但会被自定义规则覆盖
    ,"extends": "eslint:recommended"
    // 分析器配置
    , "parserOptions": { "ecmaVersion": 6 }
}